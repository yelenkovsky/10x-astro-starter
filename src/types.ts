import type { Database } from "@/db/database.types";

/**
 * A helper type to extract the Row type from a table in the public schema.
 * @example
 * type ProfileRow = Tables<"profiles">;
 */
type Tables<T extends keyof Database["public"]["Tables"]> = Database["public"]["Tables"][T]["Row"];

// --- Database Entity Types ---

/** Represents the `profiles` table in the database. */
export type TProfile = Tables<"profiles">;

/** Represents the `flashcards` table in the database. */
export type TFlashcard = Tables<"flashcards">;

/** Represents the `user_flashcard_repetition` table in the database. */
export type TUserFlashcardRepetition = Tables<"user_flashcard_repetition">;

// --- DTOs (Data Transfer Objects) ---
// These types define the shape of data sent from the server to the client.

// --- User DTOs ---

/**
 * DTO for a user's profile.
 * Corresponds to the `TProfile` entity.
 * @see TProfile
 */
export type UserProfileDto = TProfile;

// --- Flashcard DTOs ---

/**
 * DTO for a single flashcard.
 * Corresponds to the `TFlashcard` entity.
 * @see TFlashcard
 */
export type FlashcardDto = TFlashcard;

/**
 * DTO for a paginated list of flashcards.
 * @see FlashcardDto
 */
export interface FlashcardListDto {
  data: FlashcardDto[];
  pagination: {
    page: number;
    pageSize: number;
    totalItems: number;
    totalPages: number;
  };
}

/**
 * DTO for flashcard suggestions generated by AI.
 * This is a transient type and is not stored in the database directly.
 * @see TFlashcard
 */
export type GenerateFlashcardSuggestionsDto = Pick<TFlashcard, "front" | "back">[];

// --- Review DTOs ---

/**
 * DTO for a single flashcard within a learning session.
 * Combines fields from `TFlashcard` and `TUserFlashcardRepetition`.
 * @see TFlashcard
 * @see TUserFlashcardRepetition
 */
export type LearningSessionFlashcardDto = Pick<TFlashcard, "id" | "front" | "back"> & {
  repetition: Pick<TUserFlashcardRepetition, "id" | "next_review_date">;
};

/**
 * DTO for a learning session, containing a list of flashcards to review.
 * @see LearningSessionFlashcardDto
 */
export type LearningSessionDto = LearningSessionFlashcardDto[];

/**
 * DTO for the result of a flashcard review.
 * Represents the updated state of a user's repetition data for a flashcard.
 * @see TUserFlashcardRepetition
 */
export type ReviewRepetitionDto = Pick<
  TUserFlashcardRepetition,
  "id" | "user_id" | "flashcard_id" | "interval" | "ease_factor" | "next_review_date"
>;

// --- Command Models ---
// These types define the shape of data sent from the client to the server for CUD operations.

// --- User Command Models ---

/**
 * Command model for updating a user's profile.
 * All fields are optional.
 * @see TProfile
 */
export type UpdateUserProfileCommand = Partial<Pick<TProfile, "avatar_url">>;

// --- Flashcard Command Models ---

/**
 * Command model for creating a single flashcard manually.
 * @see TFlashcard
 */
export type CreateFlashcardCommand = Pick<TFlashcard, "front" | "back">;

/**
 * Represents a single item in a batch creation request for flashcards.
 * @see TFlashcard
 */
export type CreateFlashcardBatchItem = Pick<TFlashcard, "front" | "back" | "origin" | "source_text">;

/**
 * Command model for creating a batch of flashcards, typically from AI suggestions.
 * @see CreateFlashcardBatchItem
 */
export type CreateFlashcardBatchCommand = CreateFlashcardBatchItem[];

/**
 * Command model for updating an existing flashcard.
 * All fields are optional.
 * @see TFlashcard
 */
export type UpdateFlashcardCommand = Partial<Pick<TFlashcard, "front" | "back">>;

/**
 * Command model for generating flashcard suggestions from a source text.
 * Requires the `source_text` field.
 * @see TFlashcard
 */
export type GenerateFlashcardSuggestionsCommand = Required<Pick<TFlashcard, "source_text">>;

// --- Review Command Models ---

/** Defines the possible performance ratings a user can give during a review. */
export type PerformanceRating = "again" | "hard" | "good" | "easy";

/**
 * Command model for updating a flashcard's review status based on user performance.
 */
export interface UpdateReviewStatusCommand {
  performance_rating: PerformanceRating;
}
